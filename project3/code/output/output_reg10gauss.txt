#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configureation file for the regression CNN
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import tensorflow.python.util.deprecation as deprecation
deprecation._PRINT_DEPRECATION_WARNINGS = False
import tensorflow as tf
from generate import load_data
from tools import preprocess, r2_score


###############################################################################
# Set up the data
###############################################################################

type = "regression"

path = "../data/"
filename = "gaussianmaps_(10000, 28, 28, 20)_0.008_0.0_0.0_10.0_1.0e+00_True_.npy"
data_file = path+filename
slice = None

maps, labels, stats = load_data(file=data_file, slice=slice)

(X_train, y_train), (X_test, y_test) = preprocess(maps, labels,
                                                train_size = 0.8,
                                                regress=True,
                                                scale=True,
                                                seed=42,
                                                shuffle=True)


###############################################################################
# for create_model()
###############################################################################

input_shape = (28, 28, 20)     # Shape of the images, holds the raw pixel values

n_filters = 16                 # For the first Conv2D layer
kernel_size = (5, 5)
layer_config = [32, 64]        # (layer1, layer2, layer3, ....)

connected_neurons = 128        # For the first Dense layer
n_categories = 1               # For the last Dense layer

input_activation  = "relu"
hidden_activation = "relu"
output_activation = "sigmoid"

reg = None

###############################################################################
# for train_model()
###############################################################################

model_dir = "tmp/"           # Where to save the model

epochs = 50
batch_size = 10

opt = tf.keras.optimizers.Adam(learning_rate=1e-2)

# callbacks
reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-15)
early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

loss = "mean_squared_error"
metrics = [r2_score]



(ML) alida ~/Documents/uio/Master/FYS-STK4155/project3/code master(*&?) $ python CNN.py -rn reg10gauss
________________________________________________________________

Analysis: regression
Save as:  reg10gauss
________________________________________________________________

Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 28, 28, 16)        8016
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 14, 14, 16)        0
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 14, 14, 32)        12832
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 7, 7, 32)          0
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 7, 7, 64)          51264
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 3, 3, 64)          0
_________________________________________________________________
flatten (Flatten)            (None, 576)               0
_________________________________________________________________
dense (Dense)                (None, 128)               73856
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 129
=================================================================
Total params: 146,097
Trainable params: 146,097
Non-trainable params: 0
_________________________________________________________________

training: 6400 - validation: 1600 - Untrained, r2_score: -4.04%
_________________________________________________________________

Epoch 1/50
512/512 [==============================] - 38s 73ms/step - loss: 0.0839 - r2_score: -0.1699 - val_loss: 0.0822 - val_r2_score: -0.1574 - lr: 0.0100
Epoch 2/50
512/512 [==============================] - 49s 96ms/step - loss: 0.0832 - r2_score: -0.1551 - val_loss: 0.0822 - val_r2_score: -0.1578 - lr: 0.0100
Epoch 3/50
512/512 [==============================] - 44s 86ms/step - loss: 0.0832 - r2_score: -0.1409 - val_loss: 0.0823 - val_r2_score: -0.1596 - lr: 0.0100
Epoch 4/50
512/512 [==============================] - 36s 70ms/step - loss: 0.0833 - r2_score: -0.1381 - val_loss: 0.0822 - val_r2_score: -0.1585 - lr: 0.0100
Epoch 5/50
512/512 [==============================] - 40s 78ms/step - loss: 0.0832 - r2_score: -0.1427 - val_loss: 0.0831 - val_r2_score: -0.1711 - lr: 0.0100
Epoch 6/50
512/512 [==============================] - 44s 85ms/step - loss: 0.0833 - r2_score: -0.1506 - val_loss: 0.0822 - val_r2_score: -0.1584 - lr: 0.0100
Epoch 7/50
512/512 [==============================] - 38s 73ms/step - loss: 0.0833 - r2_score: -0.1522 - val_loss: 0.0822 - val_r2_score: -0.1575 - lr: 1.0000e-03
Epoch 8/50
512/512 [==============================] - 37s 72ms/step - loss: 0.0832 - r2_score: -0.1506 - val_loss: 0.0822 - val_r2_score: -0.1579 - lr: 1.0000e-03
Epoch 9/50
512/512 [==============================] - 40s 77ms/step - loss: 0.0832 - r2_score: -0.1584 - val_loss: 0.0822 - val_r2_score: -0.1579 - lr: 1.0000e-03
Epoch 10/50
512/512 [==============================] - 41s 80ms/step - loss: 0.0832 - r2_score: -0.1440 - val_loss: 0.0822 - val_r2_score: -0.1577 - lr: 1.0000e-03
Epoch 11/50
512/512 [==============================] - 39s 76ms/step - loss: 0.0832 - r2_score: -0.1455 - val_loss: 0.0822 - val_r2_score: -0.1580 - lr: 1.0000e-03
_________________________________________________________________

r2_score: -5.09%
_________________________________________________________________
